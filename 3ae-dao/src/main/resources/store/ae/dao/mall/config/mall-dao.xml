<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	 xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/tx  
    	http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.3.xsd">
	
   <!-- 加载jdbc配置文件 -->
   <context:property-placeholder location="classpath:store/ae/dao/mall/config/mall-jdbc.properties" ignore-unresolvable="true"/>
   <!-- 加载redis配置文件 -->
   <context:property-placeholder location="classpath:store/ae/dao/mall/config/mall-redis.properties" ignore-unresolvable="true"/>
		
	<!-- 配置扫描dao接口包, 动态实现dao接口, 注入到spring容器中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- 注入sqlSessionFactory -->
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
		<!-- 给出扫描dao接口包 -->
		<property name="basePackage" value="store.ae.dao.mall" />
	</bean>
	
	<bean id="redisDao" class="store.ae.dao.mall.cache.RedisDao">
		<constructor-arg index="0" value="3ae.store" />
		<constructor-arg index="1" value="56379" />
	</bean>

	<!-- 配置 JedisPoolConfig 实例 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!--最大空闲数-->
		<property name="maxIdle" value="${redis.maxIdle}"/>
		<!--连接池的最大数据库连接数  -->
		<property name="maxTotal" value="${redis.maxTotal}"/>
		<!--最大建立连接等待时间-->
		<property name="maxWaitMillis" value="${redis.maxWaitMillis}"/>
		<!--逐出连接的最小空闲时间 默认1800000毫秒(30分钟)-->
		<property name="minEvictableIdleTimeMillis" value="${redis.minEvictableIdleTimeMillis}" />
		<!--每次逐出检查时 逐出的最大数目 如果为负数就是 : 1/abs(n), 默认3-->
		<property name="numTestsPerEvictionRun" value="${redis.numTestsPerEvictionRun}" />
		<!--逐出扫描的时间间隔(毫秒) 如果为负数,则不运行逐出线程, 默认-1-->
		<property name="timeBetweenEvictionRunsMillis" value="${redis.timeBetweenEvictionRunsMillis}" />
		<!--是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个-->
		<property name="testOnBorrow" value="${redis.testOnBorrow}"/>
		<!--在空闲时检查有效性, 默认false  -->
		<property name="testWhileIdle" value="${redis.testWhileIdle}" />
	</bean>

	<!-- 配置JedisConnectionFactory -->
	<bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<!--IP地址 -->
		<property name="hostName" value="${redis.host}" />
		<!--端口号  -->
		<property name="port" value="${redis.port}" />
		<!--如果Redis设置有密码  -->
		<property name="password" value="${redis.pass}" />
		<!--客户端超时时间单位是毫秒  -->
		<property name="timeout" value="${redis.timeout}" />
		<!--redis数据库序号，redis默认有16个库（从0-15），这里默认是0 -->
		<property name="database" value="${redis.dbIndex}" />
		<property name="poolConfig" ref="poolConfig"/>
	</bean>


	<!-- mysql连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- 配置连接池属性 -->
		<property name="driverClassName" value="${jdbc.driver}"/>
		<property name="url" value="${jdbc.url}"/>
		<property name="username" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
		
		<!-- 配置监控统计拦截的filters -->
     	<property name="filters" value="stat" />
		
		<!-- druid 连接池的私有属性 -->
		<!-- 配置初始化大小、最小、最大 -->
	     <property name="maxActive" value="20" />
	     <property name="initialSize" value="1" />
	     <property name="minIdle" value="1" />
		
		<!-- 配置获取连接等待超时的时间 -->
     	<property name="maxWait" value="1000" />
     	
     	<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
     	<property name="timeBetweenEvictionRunsMillis" value="60000" />
     	
		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
	     <property name="minEvictableIdleTimeMillis" value="300000" />
	
	     <property name="testWhileIdle" value="true" />
	     <property name="testOnBorrow" value="false" />
	     <property name="testOnReturn" value="false" />
	</bean>
	
	<!-- 配置整合mybatis过程 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 注入数据库连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- <property name="transactionFactory">
			<bean id="transactionManager" class="org.apache.ibatis.transaction.managed.ManagedTransactionFactory"></bean>
		</property> -->
		<!-- 配置mybatis全局配置文件:mybatis.xml -->
		<property name="configLocation" value="classpath:store/ae/dao/common/mybatis.xml" />
		<!-- 扫描pojo包使用别名 store.ae.pojo.Seckill => Seckill -->
		<property name="typeAliasesPackage" value="store.ae.pojo.mall" />
		<!-- 扫描sql配置文件:mapper需要的xml文件 -->
		<property name="mapperLocations" value="classpath*:store/ae/dao/mall/mapper/*/*.xml" />
	</bean>
</beans>